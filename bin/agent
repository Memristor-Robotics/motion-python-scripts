#!/usr/bin/python3

import socket
import sys,os,threading
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir, 'python'))
from com.Can import *
from util.Convert import *
CAN_TO_NETWORK = 1
CAN_TO_SLAVES = 2

TCP_IP = '0.0.0.0'
TCP_PORT = 5005
BUFFER_SIZE = 20  # Normally 1024, but we want fast response

# bind TCP ip and port
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((TCP_IP, TCP_PORT))
s.listen(10)

# protocol: type B,data lenB
connection_list = []
c = Can()


# Agent
#	This command listens for TCP incoming connections (TCP server)
#	and does routing of CAN messages to/from TCP clients

# canid = 0x258, ext id, 8 bytes, padding 3 Bytes, 8 Bytes 
# 5802 0080 0800 0000 6902 0202 0200 0000 

# TCP -> CAN
class Controller(threading.Thread):
	def __init__(self, conn):
		threading.Thread.__init__(self)
		self.conn = conn
		
	def run(self):
		while True:
			len_and_type = self.conn.recv(3)
			
			if len(len_and_type) == 0:
				print('client disconnected')
				connection_list.remove(self.conn)
				break
			elif len(len_and_type) < 3:
				continue
				
			_len=l16(len_and_type,0)
			_type = len_and_type[2]
			msg = self.conn.recv(_len & 0xffff)
			
			if _type == CAN_TO_SLAVES:
				frame = msg[:16]
				#  frame = self.conn.recv(16)
				print('sending frame ', nice_hex(frame))
				# just send whole frame
				c.s.send(frame)


# CAN -> TCP
class CANListener(threading.Thread):
	def __init__(self):
		threading.Thread.__init__(self)
		
	def run(self):
		while True:
			# read from CAN
			can_frame = c.s.recv(16)
			for i in connection_list:
				# send to all connected TCPs
				try:
					i.send(bytes([0,16+1, CAN_TO_NETWORK]) + can_frame)
				except:
					connection_list.remove(i)
					pass

listener = CANListener()
listener.start()
while True:
	conn, addr = s.accept()
	print('new connection ' + str(addr))
	connection_list.append(conn)
	cnt=Controller(conn)
	cnt.start()
